#include <Adafruit_NeoPixel.h> //imports the neo pixel library

#define PIN 6   // sets the arduino pin as pin 6


/*
creating an object called strip of class Adafruit_NeoPixel
*/
Adafruit_NeoPixel strip = Adafruit_NeoPixel(12, PIN, NEO_GRB + NEO_KHZ800);


int pulseDuration = 50;   //sets the pulse duration to 50 milliseconds


int pulseBrightness = 255; //sets the pulse brightness to max (range of 0-255)


// colors I picked from adobe kuler: http://goo.gl/I5x9aP
uint32_t darkBlue = strip.Color(9, 75, 108);  //sets variable dark blue as a select rgb value
uint32_t lightBlue = strip.Color(65, 195, 255);   //sets variable lightBlue as a selecte rgb value
uint32_t greyBlue = strip.Color(16, 129, 193);
uint32_t blueGrey = strip.Color(75, 99, 107);


void setup() { //setup code is code that will run once
  strip.begin();  //runs the begin function from the adafruit class
  strip.show();    //runs the show function from the adafruit class
  }

void loop() {   //all code in the void loop function run indefinitely until told to stop

/* inside the () it creates the variable j with a value of 0 and allows the program to run
as long as the value of j is less than or equal to 12. Also every time the program runs
it adds 1 to the value of j
*/

for (int j = 0; j <= 12; j++) {
   pulseRangeOfLeds(0, j, lightBlue, pulseDuration); //flashes the number of leds in this case the value of j, sets the flashed color as blue and then sets the time the leds flash
  }
}
void pulseOneLed(int pixelNumber, uint32_t color, int duration) { // Making pixelNumber a variable and adds color uint32_t and also makes duration a variable
  for(int i = 0; i < pulseBrightness; i+=10) { // runs this makes (i) a variable = to 0 but every run add 10 to the brightness
 
 
    strip.setBrightness(i); // this is the brightness of the led = 0
    turnPixelOn(pixelNumber, color); // turns on the led and uses variable pixelNumber which makes it color uint32_t
    delay(duration/2); // has a delay of 2 seconds
  }
  
   for(int i = pulseBrightness; i > 0; i-=10) { // makes the led pulse but instead of i going up 10 every pass it goes down 10 dimming the light
   
   
    strip.setBrightness(i); 
    turnPixelOn(pixelNumber, color); 
    delay(duration/2);
  }
}

int setIncrementSize(int firstNeoPixel, int lastNeoPixel, int delayDuration) { // adds multiple variables
  int var = lastNeoPixel - firstNeoPixel; // making variable (var) equal something
  switch (var) { 
    case 1: // do var funstion when equal to 1
      
      
      return 10; // terminates the program and returns to 10
      break;
    case 2: // do var function when equal to 2
      
      
//These are lines 65-96
return 10;
break;
// Break allows to seperate/split the code at this point
case 3:
return 5;
// Terminates function and returns to line 5
break;
// Breaks
case 4:
// Case is like IF, it controlls the flow of the code, but case is compared to the statment it's placed in
//Thus when the Code BREAK is in place, then case will start the next part of the code.
// After CASE is used, then RETURN will be used to return the code to the origional function and gets ready to BREAK
return 5;
break;
case 5:
return 5;
break;
default:
return 1;
}
}
//-------As of now the codes BREAK, CASE, RETURN that have been used are the codes that will make this thing count
int setDelayDuration(int incrementSize, int delayDuration) {
int var = incrementSize; // This code will be set as the initiation of the delay for the variable selected.
switch (var) {
  break; //exit from a do or switch statment
    case 5: //telling that switch to do something
   
   
      return delayDuration/2; // break the system or restart
      break;// exit from a do or switch statment
    default: 
  
  
      return delayDuration/40; //break from system or restart
  }
}



void pulseRangeOfLeds(int firstPixel, int lastPixel, uint32_t color, int duration) { //changes the rythme of leds
  
  
  int increment = setIncrementSize(firstPixel, lastPixel, duration); // adds variable for size of pixel and brightness
  
  
  int adjustedTime = setDelayDuration(increment, duration); // adds variable for delay time
  
  
  
  for(int i = 0; i < pulseBrightness; i+=increment) { //how long thr britness should go on for
    strip.setBrightness(i); // Brightness of led
    int pixel = firstPixel; // adds variable
   
   
    while(pixel < lastPixel) { //while one pixel is doing something the last pixel will be doing the same
    for(int i = 0; i < pulseBrightness; i+=increment) { // variable i is pulse brightness and  itis less than zero
    strip.setBrightness(i);// pushes data to set brightness
    int pixel = firstPixel; //adding variable pixel and equals first pixel
   
   
    while(pixel < lastPixel) { // if "pixel is greater than "last pixel than run the function below
      turnPixelOn(pixel, color); //turns on pixel and sets color
      pixel++; // adds one to the pixel with "++"
      }
    delay(adjustedTime); // delay between pixel change
  }
  
  for(int i = pulseBrightness; i > 0; i-=increment) { //variable i is pulse bightness and its greater than zero
    strip.setBrightness(i);// pushes data to se brightness
    int pixel = firstPixel;// int pixel is adding a variable
    while(pixel < lastPixel) {
      turnPixelOn(pixel, color);//turns light on with the intented light number and color
      pixel++;//whatever the pixel count is, the plus' add +1
      }
    delay(adjustedTime);// 
  }
  
}




void turnPixelOn(int pixelNumber, uint32_t pixelColor) {//looping effect to turn the given pixel light on with the given color
  strip.setPixelColor(pixelNumber, pixelColor);//pushes data to set the color of light to the given pixel
  strip.show();//strip.show pushes data out to the pixel
}



void turnPixelOff(int pixelNumber) {//looping effect to turn the given pixel light off
   strip.setPixelColor(pixelNumber, 0, 0, 0);
  strip.show();//strip.show pushes data out to the pixel
}
